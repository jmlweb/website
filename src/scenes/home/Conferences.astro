---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import { YouTube } from 'astro-embed';
import { Icon } from 'astro-icon/components';

import { pipe, sortWith } from 'mochila-ts';
import { cva } from '@/utils/cva';

import { useTranslations, getLangFromUrl } from '@/utils/i18n';
import ExternalLink from '@/components/ExternalLink.astro';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const rawConferences = pipe(
  sortWith<CollectionEntry<'conferences'>>((a, b) => b.data.weight - a.data.weight),
)(await getCollection('conferences'));

const conferences = rawConferences.map(({ data, ...rest }) => ({
  ...data,
  ...rest,
}));

const article = cva({
  base: 'rounded-md border border-slate-200 bg-slate-50 ~p-4/6 dark:border-slate-800 dark:bg-slate-950/40 flex flex-col',
  variants: {
    large: {
      true: 'row-span-2',
      false: 'row-span-1',
    },
  },
});

const infoLink = cva({
  base: 'underline decoration-slate-600 underline-offset-4 transition-colors  dark:decoration-slate-600 dark:hover:text-slate-200 hover:text-slate-900',
});

const typeText = cva({
  base: 'mr-1.5 inline font-semibold after:ml-1.5 after:text-slate-500 after:content-["Â·"] dark:after:text-slate-400',
  variants: {
    type: {
      talk: 'text-cyan-600 dark:text-cyan-300',
      workshop: 'text-indigo-600 dark:text-indigo-300',
      article: 'text-orange-500 dark:text-amber-400',
    },
  },
});
---

{
  conferences.map((conference) => (
    <article
      class={article({
        large: Boolean(conference.youtube),
      })}
    >
      {conference.youtube && (
        <div class="print-hidden mb-4 ring-1 ring-slate-900/10 dark:ring-white/10">
          <YouTube
            id={conference.youtube}
            title={conference.title}
            posterQuality="high"
            playlabel={t('conferences:playVideo')}
          />
        </div>
      )}
      <div class="mt-2">
        <p
          class={typeText({
            type: conference.type,
          })}
        >
          {t(`conferences:${conference.type}`)}
        </p>
        <h3
          class="inline font-semibold text-slate-900 dark:text-slate-200"
          lang={conference.language}
        >
          {conference.title}
        </h3>
      </div>
      <p class="mt-2 flex flex-wrap items-center gap-x-2 gap-y-1 text-slate-700 dark:text-slate-300">
        {conference.for.href ? (
          <ExternalLink class={infoLink()} href={conference.for.href}>
            {conference.for.title}
          </ExternalLink>
        ) : (
          conference.for.title
        )}
        {conference.type !== 'article' && (
          <Fragment>
            /{' '}
            {!conference.place ? (
              'Online'
            ) : (
              <ExternalLink
                class={infoLink()}
                href={`https://www.google.com/maps/place/${encodeURIComponent(conference.place)}`}
              >
                {conference.place}
              </ExternalLink>
            )}
          </Fragment>
        )}
      </p>
      <div class="mt-4 flex flex-wrap items-center gap-3">
        <p class="flex items-center gap-1">
          <Icon name="ri:calendar-line" class="size-5" aria-label={t('conferences:year')} />{' '}
          {conference.year}
        </p>
        <p class="flex items-center gap-1">
          <Icon
            name="ri:speak-line"
            class="-mt-0.5 size-5"
            aria-label={t('conferences:language')}
          />{' '}
          {t(`common:${conference.language}`)}
        </p>
      </div>
    </article>
  ))
}
