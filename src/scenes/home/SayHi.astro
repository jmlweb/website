---
import { useTranslations, getLangFromUrl } from '@/utils/i18n';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<say-hi>
  <button
    aria-pressed="true"
    aria-label={t('sayHi:disable')}
    aria-live="polite"
    data-message-enable={t('sayHi:enable')}
    data-message-disable={t('sayHi:disable')}
    class="print-hidden relative inline-block cursor-pointer motion-safe:aria-pressed:before:say-hi before:inline-block before:grayscale before:content-['👋🏻'] hover:opacity-80 aria-pressed:before:grayscale-0"
  >
  </button>
</say-hi>

<noscript>
  <style>
    say-hi {
      display: none;
    }
  </style>
</noscript>

<script>
  class SayHi extends HTMLElement {
    connectedCallback() {
      const button = this.querySelector<HTMLButtonElement>('button');
      if (!button) {
        return;
      }

      const handleChange = (isEnabled: boolean) => {
        button.ariaPressed = String(isEnabled);
        button.ariaLabel = isEnabled
          ? button.dataset.messageDisable!
          : button.dataset.messageEnable!;
      };

      handleChange(localStorage.getItem('sayHi') !== 'false');

      // Each time the button is clicked, update the count.
      button.addEventListener('click', (e) => {
        const newState = (e.currentTarget as any).ariaPressed === 'true' ? false : true;
        localStorage.setItem('sayHi', String(newState));
        handleChange(newState);
      });

      window.addEventListener('storage', (e) => {
        if (e.key === 'sayHi') {
          handleChange(e.newValue === 'true');
        }
      });
    }
  }
  customElements.define('say-hi', SayHi);
</script>
