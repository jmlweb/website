---
import { useTranslations, getLangFromUrl } from '@/utils/i18n';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<say-hi
  class="js-only"
  data-message-enable={t('sayHi:enable')}
  data-message-disable={t('sayHi:disable')}
>
</say-hi>

<script>
  import { Dataset } from '@/utils/dom';

  const strToBool = (str: string | null) => str === 'true';

  class SayHi extends HTMLElement {
    button: HTMLButtonElement;
    dataValue: ReturnType<typeof Dataset>;

    constructor() {
      super();
      this.button = document.createElement('button');
      this.button.className =
        "print-hidden relative inline-block cursor-pointer motion-safe:aria-pressed:before:say-hi before:inline-block before:grayscale before:content-['👋🏻'] hover:opacity-80 aria-pressed:before:grayscale-0";
      this.dataValue = Dataset(this);
    }

    handleChange(newValue: boolean) {
      this.button.setAttribute('aria-pressed', String(newValue));
      this.button.setAttribute(
        'aria-label',
        newValue ? this.dataValue('messageDisable') : this.dataValue('messageEnable'),
      );
    }

    connectedCallback() {
      this.handleChange(localStorage.getItem('sayHi') !== 'false');
      this.button.setAttribute('aria-live', 'polite');
      this.appendChild(this.button);

      this.button.addEventListener('click', (e) => {
        const newState = !strToBool((e.currentTarget as any).ariaPressed);
        localStorage.setItem('sayHi', String(newState));
        this.handleChange(newState);
      });

      window.addEventListener('storage', (e) => {
        if (e.key === 'sayHi') {
          this.handleChange(strToBool(e.newValue));
        }
      });
    }
  }

  customElements.define('say-hi', SayHi);
</script>
