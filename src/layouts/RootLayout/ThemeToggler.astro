---
import { Icon } from 'astro-icon/components';
import { cva } from '@/utils/cva';
import { useTranslations, getLangFromUrl } from '@/utils/i18n';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const iconWrapper = cva({
  base: 'inline-flex size-8 items-center justify-center',
});

const icon = cva({
  base: 'relative inline-block size-5',
  variants: {
    theme: {
      light: 'text-orange-700 group-aria-pressed:text-orange-200',
      dark: 'text-indigo-500 group-aria-pressed:text-indigo-200',
    },
  },
});
---

<theme-toggler
  data-message-enable={t('darkMode:enable')}
  data-message-disable={t('darkMode:disable')}
  class="js-only"
>
  <template>
    <span aria-hidden="true" class={iconWrapper()}>
      <Icon name="ri:sun-line" class={icon({ theme: 'light' })} />
    </span>
    <span aria-hidden="true" class={iconWrapper()}>
      <Icon name="ri:moon-line" class={icon({ theme: 'dark' })} />
    </span>
  </template>
</theme-toggler>

<script>
  import { isDarkAtom } from '@/store';
  import { querySelector, Dataset } from '@/utils/dom';
  import { handleShow, handleHide, handleUpdate } from '@/components/SimpleTooltip/tooltipEvents';

  class ThemeToggler extends HTMLElement {
    button: HTMLButtonElement;
    dataValue: ReturnType<typeof Dataset>;

    constructor() {
      super();
      this.button = document.createElement('button');
      this.button.className =
        "group relative inline-flex h-8 items-center rounded-full bg-slate-100 shadow-md ring-1 ring-inset ring-slate-300 aria-pressed:bg-slate-950 aria-pressed:ring-slate-700 before:absolute before:left-0 before:top-0 before:size-8 before:rounded-full before:border before:border-amber-400/50 before:bg-amber-300 before:transition before:content-[''] aria-pressed:before:translate-x-full aria-pressed:before:border-indigo-500/50 aria-pressed:before:bg-indigo-600";
      this.button.setAttribute('aria-live', 'polite');
      this.dataValue = Dataset(this);
    }

    handleChange(newValue: boolean) {
      this.button.setAttribute('aria-pressed', newValue ? 'true' : 'false');
      this.button.setAttribute(
        'aria-label',
        newValue ? this.dataValue('messageDisable') : this.dataValue('messageEnable'),
      );
      handleUpdate({ message: this.button.getAttribute('aria-label') ?? '' });
    }

    connectedCallback() {
      const template = querySelector<HTMLTemplateElement>('template', this);
      this.button.innerHTML = template.innerHTML;
      this.handleChange(isDarkAtom.get());
      this.appendChild(this.button);

      isDarkAtom.listen((isDark) => {
        this.handleChange(isDark);
      });

      this.button.addEventListener('click', () => {
        const newValue = !isDarkAtom.get();
        localStorage.setItem('theme', newValue ? 'dark' : 'light');
        isDarkAtom.set(newValue);
      });

      this.button.addEventListener('mouseenter', () => {
        handleShow({
          trigger: this.button,
          message: this.button.getAttribute('aria-label') ?? '',
        });
      });

      this.button.addEventListener('mouseleave', () => {
        handleHide();
      });
    }
  }

  customElements.define('theme-toggler', ThemeToggler);
</script>
