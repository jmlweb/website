---
import { Icon } from 'astro-icon/components';
import { getRelativeLocaleUrl } from 'astro:i18n';

import type { ComponentProps } from 'astro/types';

import RootLayout from '../RootLayout/RootLayout.astro';
import Container from '../../components/Container.astro';
import DarkModeToggler from './DarkModeToggler.astro';

type Props = ComponentProps<typeof RootLayout>;

const { title } = Astro.props;
const languageLink =
  Astro.currentLocale === 'es'
    ? {
        href: '/en',
        label: 'English',
        lang: 'en',
      }
    : {
        href: '/',
        label: 'Español',
        lang: 'es',
      };
---

<RootLayout title={title}>
  <Fragment slot="head">
    <link rel="alternate" hreflang="en" href={`${import.meta.env.SITE}/en`} />
    <link rel="alternate" hreflang="x-default" href={import.meta.env.SITE} />
  </Fragment>
  <div class="min-h-screen text-slate-700 dark:bg-slate-900 dark:text-slate-300">
    <div class="border-b dark:border-b-slate-800">
      <Container as="header" class="flex items-center justify-between ~py-2/3">
        <a
          href={getRelativeLocaleUrl(Astro.currentLocale ?? 'es', '/')}
          class="text-orange-500 dark:text-amber-400"
        >
          <span class="sr-only">José Manuel Lucas</span>
          <Icon class="aspect-square h-auto ~w-9/11" name="logo" aria-hidden="true" />
        </a>
        <span class="flex items-center justify-between gap-3">
          <a
            class="inline-flex h-10 items-center justify-center px-3 font-medium text-slate-500 transition-colors hover:text-slate-900 dark:text-slate-400 dark:hover:text-slate-300"
            href={languageLink.href}
            lang={languageLink.lang}
            hreflang={languageLink.lang}>{languageLink.label}</a
          >
          <DarkModeToggler />
        </span>
      </Container>
    </div>
    <main>
      <slot />
    </main>
  </div>
</RootLayout>
<script is:inline>
  window.AnimationBlocker = () => {
    const css = document.createElement('style');
    css.appendChild(
      document.createTextNode(
        `* {
          -webkit-transition: none !important;
          -moz-transition: none !important;
          -o-transition: none !important;
          -ms-transition: none !important;
          transition: none !important;
        }`,
      ),
    );
    document.head.appendChild(css);
    window.getComputedStyle(css).opacity;
    return () => document.head.removeChild(css);
  };
  const isDarkMode =
    localStorage.getItem('theme') === 'dark' ||
    (!('theme' in localStorage) && !window.matchMedia('(prefers-color-scheme: light)').matches);
  const unblock = window.AnimationBlocker();
  document.documentElement.classList.toggle('dark', isDarkMode);
  unblock();
</script>
<script>
  import { initializeTheme } from './theme';

  initializeTheme();
</script>
